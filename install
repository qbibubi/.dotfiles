#! /bin/sh

# This script should be run via curl after fresh Arch Linux install 
# for the best compatibility. Other use cases were not taken into 
# consideration. Use at your own risk.


# Output coloring
readonly red='\033[0;31m'
readonly green='\033[0;32m'
readonly orange='\033[0;33m'
readonly nc='\033[0m' #no color 


# Installs packages listed in $packages
install_packages()
{
  local packages="git archlinux-keyring tmux zsh kitty discord i3-wm ly neofetch polybar rofi xorg-xinit"

  printf "Installing ${orange}packages${nc}..."
  sudo pacman -Syu --noconfirm
  sudo pacman -S -q --noconfirm $packages

  if $? -ne 0; then
    printf "Packages installed ${red}unsuccesfully.${nc}"
  else
    printf "Packages installed ${green}succesfully.${nc}"
  fi
}


# Installs yay package manager
install_yay()
{
  local yay_repo_url="https://aur.archlinux.org/yay-bin.git"

  printf "Installing ${orange}yay${nc}..."
  cd $HOME && git clone "$yay_repo_url" 

  cd yay-bin && makepkg --noconfirm -si
  if $? -ne 0; then
    printf "yay installed ${red}unsuccesfully${nc}."
  else
    printf "yay installed ${green}succesfully${nc}."
  fi

  rm --recursive --force -- yay-source
}


install_zsh_autosuggestions()
{
  local zsh_autosuggestions_url="https://github.com/zsh-users/zsh-autosuggestions" 
  git clone $zsh_autosuggestions_url "$HOME"/.zsh/zsh-autosuggestions
}


command_exists()
{
  command -v "$@" >/dev/null 2>&1
}

user_can_sudo()
{
  command_exists sudo || return 1
}

# Changes shell to zsh
change_shell()
{
  local zsh="/usr/bin/zsh"
  printf "Changing shell to ${orange}zsh${nc}..."
  
  # if shell is zsh already do not switch
  if [ "$(basename -- $SHELL)" = "zsh" ]; then
    return
  fi

  if user_can_sudo; then
    sudo -k chsh -s "$zsh" "$USER"
  else
    chsh -s "$zsh" "$USER"
  fi

  if $? -ne 0; then 
    printf "chsh command run ${red}unsuccesfully${nc}. Change your shell manually"
  else
    export SHELL="$zsh"
    printf "Shell changed to zsh ${green}succesfully${nc}"
  fi

  exec zsh -l
}


# Helper function as alias for clone_bare_repository
bare_config()
{
  /usr/bin/git --git-dir="$HOME"/.dotfiles/ --work-tree="$HOME" $@ 
}

# Clones a bare repository from dotfiles_repo_url to $HOME/.dotfiles directory.
# Adds ".dotfiles" to $HOME/.gitignore. Makes a config-backup for pre-existing
# configuration files
clone_bare_repository()
{
  local dotfiles_repo_url="https://github.com/qbibubi/.dotfiles.git"

  printf "Creating ${orange}.dotfiles${nc} bare repository in ${ORANGE}$HOME/.dotfiles${NC}..."
  git clone --bare $dotfiles_repo_url "$HOME"/.dotfiles

  printf "alias config='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'" >> "$HOME"/.zshrc
  printf ".dotfiles" >> "$HOME"/.gitignore 

  cd "$HOME" && mkdir -p .config-backup
  bare_config checkout
  if $? -ne 0; then
    printf "Backing up pre-existing .dotfiles..."
    bare_config checkout 2>&1 | grep -E "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
  else
    printf "Checked out config."
  fi;

  bare_config checkout
  bare_config config status.showUntrackedFiles no 
}

install_packages
install_yay
clone_bare_repository
change_shell
